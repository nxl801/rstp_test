<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="1" failures="3" skipped="5" tests="32" time="1057.565" timestamp="2025-09-08T16:23:54.272938+08:00" hostname="DESKTOP-FDB8GR9"><testcase classname="tests.test_convergence.TestConvergence" name="test_direct_link_failure" time="434.025"><failure message="AssertionError: RSTP收敛时间过长: 31.46秒&#10;assert 31.463571786880493 &lt; 2.0">self = &lt;test_convergence.TestConvergence object at 0x000001A9E6BD74D0&gt;
dut_manager = &lt;src.ssh_manager.SSHManager object at 0x000001A9E6BF7CB0&gt;
test_nodes = [&lt;src.ssh_manager.SSHManager object at 0x000001A9E6CA5090&gt;, &lt;src.ssh_manager.SSHManager object at 0x000001A9E6CA6710&gt;]
network_topology = &lt;src.network_topology.NetworkTopology object at 0x000001A9E6CD1400&gt;
rstp_analyzer = &lt;src.rstp_analyzer.RSTPAnalyzer object at 0x000001A9E6CD1550&gt;
fault_injector = &lt;src.fault_injector.FaultInjector object at 0x000001A9E6CD16A0&gt;
convergence_monitor = &lt;conftest.convergence_monitor.&lt;locals&gt;.ConvergenceMonitor object at 0x000001A9E6CD17F0&gt;

    def test_direct_link_failure(self, dut_manager, test_nodes,
                                 network_topology, rstp_analyzer,
                                 fault_injector, convergence_monitor):
        """TC.AUTO.2.1: 直接链路故障测试"""
        logger.info("开始直接链路故障测试")
    
        # 创建环形拓扑提供冗余路径
        network_topology.create_ring_topology(use_rstp=True)
    
        # 调整优先级，确保 DUT 不是根网桥
        NetworkTopology.execute_bridge_command(test_nodes[0], "set_priority", priority=16384)
        NetworkTopology.execute_bridge_command(dut_manager, "set_priority", priority=32768)
        if len(test_nodes) &gt; 1:
            NetworkTopology.execute_bridge_command(test_nodes[1], "set_priority", priority=28672)
    
        # 等待初始收敛
        analyzers = [rstp_analyzer] + [RSTPAnalyzer(node) for node in test_nodes]
        initial_convergence = convergence_monitor.wait_for_convergence(analyzers)
        logger.info(f"初始收敛时间: {initial_convergence:.2f}秒")
    
        # 确定DUT的Root Port
        info = rstp_analyzer.get_bridge_info()
        root_port = None
        for port_name, port_info in info.ports.items():
            if port_info.role == PortRole.ROOT:
                root_port = port_name
                break
    
        assert root_port, "未找到Root Port"
        logger.info(f"DUT的Root Port: {root_port}")
    
        # 测量故障收敛时间
        start_time = time.time()
        fault_injector.link_down(root_port)
    
        # 等待重新收敛
        convergence_time = convergence_monitor.wait_for_convergence(analyzers)
    
        # 验证收敛时间（RSTP应该小于2秒）
&gt;       assert convergence_time &lt; 2.0, \
            f"RSTP收敛时间过长: {convergence_time:.2f}秒"
E       AssertionError: RSTP收敛时间过长: 31.46秒
E       assert 31.463571786880493 &lt; 2.0

tests\test_convergence.py:61: AssertionError</failure></testcase><testcase classname="tests.test_convergence.TestConvergence" name="test_root_bridge_failure" time="0.352"><skipped type="pytest.skip" message="跳过需要VMware控制的测试: vmrun工具未找到: C:/Program Files (x86)/VMware/VMware Workstation/vmrun.exe">C:\Users\30380\OneDrive\101_Schneider\05_EAE_rstp_test_framework\tests\test_convergence.py:80: 跳过需要VMware控制的测试: vmrun工具未找到: C:/Program Files (x86)/VMware/VMware Workstation/vmrun.exe</skipped></testcase><testcase classname="tests.test_convergence.TestConvergence" name="test_multiple_link_failures" time="61.048"><failure message="AssertionError: eth2收敛时间过长&#10;assert 10.478038549423218 &lt; 3.0">self = &lt;test_convergence.TestConvergence object at 0x000001A9E6B42FD0&gt;
dut_manager = &lt;src.ssh_manager.SSHManager object at 0x000001A9E6BF7CB0&gt;
test_nodes = [&lt;src.ssh_manager.SSHManager object at 0x000001A9E6CA5090&gt;, &lt;src.ssh_manager.SSHManager object at 0x000001A9E6CA6710&gt;]
network_topology = &lt;src.network_topology.NetworkTopology object at 0x000001A9E6CD1400&gt;
rstp_analyzer = &lt;src.rstp_analyzer.RSTPAnalyzer object at 0x000001A9E6CB9CD0&gt;
fault_injector = &lt;src.fault_injector.FaultInjector object at 0x000001A9E6D5C690&gt;
convergence_monitor = &lt;conftest.convergence_monitor.&lt;locals&gt;.ConvergenceMonitor object at 0x000001A9E6CD2660&gt;

    @pytest.mark.slow
    def test_multiple_link_failures(self, dut_manager, test_nodes,
                                    network_topology, rstp_analyzer,
                                    fault_injector, convergence_monitor):
        """测试多重链路故障"""
        logger.info("开始多重链路故障测试")
    
        # 创建环形拓扑
        network_topology.create_ring_topology(use_rstp=True)
    
        # 等待初始收敛
        analyzers = [rstp_analyzer] + [RSTPAnalyzer(node) for node in test_nodes]
        convergence_monitor.wait_for_convergence(analyzers)
    
        # 连续故障注入
        failures = []
        interfaces = ["eth0", "eth2"]
    
        for iface in interfaces:
            logger.info(f"注入故障: {iface}")
            start_time = time.time()
            fault_injector.link_down(iface)
    
            # 等待收敛
            convergence_time = convergence_monitor.wait_for_convergence(analyzers)
            failures.append({
                'interface': iface,
                'convergence_time': convergence_time
            })
    
            logger.info(f"{iface}故障收敛时间: {convergence_time:.2f}秒")
            time.sleep(2)
    
        # 恢复所有链路
        for iface in interfaces:
            fault_injector.link_up(iface)
    
        # 等待最终收敛
        final_convergence = convergence_monitor.wait_for_convergence(analyzers)
    
        # 验证所有收敛时间
        for failure in failures:
&gt;           assert failure['convergence_time'] &lt; 3.0, \
                f"{failure['interface']}收敛时间过长"
E           AssertionError: eth2收敛时间过长
E           assert 10.478038549423218 &lt; 3.0

tests\test_convergence.py:175: AssertionError</failure></testcase><testcase classname="tests.test_convergence.TestConvergence" name="test_convergence_with_traffic" time="40.117" /><testcase classname="tests.test_high_availability.TestHighAvailability" name="test_primary_controller_failure" time="0.001"><skipped type="pytest.skip" message="跳过需要VMware控制的测试: vmrun工具未找到: C:/Program Files (x86)/VMware/VMware Workstation/vmrun.exe">C:\Users\30380\OneDrive\101_Schneider\05_EAE_rstp_test_framework\tests\test_high_availability.py:40: 跳过需要VMware控制的测试: vmrun工具未找到: C:/Program Files (x86)/VMware/VMware Workstation/vmrun.exe</skipped></testcase><testcase classname="tests.test_high_availability.TestHighAvailability" name="test_rstp_reconvergence_no_switchover" time="33.683" /><testcase classname="tests.test_high_availability.TestHighAvailability" name="test_split_brain_scenario" time="10.212" /><testcase classname="tests.test_high_availability.TestHighAvailability" name="test_ha_switchover_with_traffic" time="0.001"><skipped type="pytest.skip" message="跳过需要VMware控制的测试: vmrun工具未找到: C:/Program Files (x86)/VMware/VMware Workstation/vmrun.exe">C:\Users\30380\OneDrive\101_Schneider\05_EAE_rstp_test_framework\tests\test_high_availability.py:178: 跳过需要VMware控制的测试: vmrun工具未找到: C:/Program Files (x86)/VMware/VMware Workstation/vmrun.exe</skipped></testcase><testcase classname="tests.test_high_availability.TestHighAvailability" name="test_ha_failback" time="0.002"><skipped type="pytest.skip" message="跳过需要VMware控制的测试: vmrun工具未找到: C:/Program Files (x86)/VMware/VMware Workstation/vmrun.exe">C:\Users\30380\OneDrive\101_Schneider\05_EAE_rstp_test_framework\tests\test_high_availability.py:227: 跳过需要VMware控制的测试: vmrun工具未找到: C:/Program Files (x86)/VMware/VMware Workstation/vmrun.exe</skipped></testcase><testcase classname="tests.test_parameters.TestParameters" name="test_bridge_priority_valid[12288]" time="2.249" /><testcase classname="tests.test_parameters.TestParameters" name="test_bridge_priority_valid[16384]" time="2.078" /><testcase classname="tests.test_parameters.TestParameters" name="test_bridge_priority_valid[32768]" time="2.079" /><testcase classname="tests.test_parameters.TestParameters" name="test_bridge_priority_valid[61440]" time="2.078" /><testcase classname="tests.test_parameters.TestParameters" name="test_bridge_priority_invalid[4097]" time="0.053" /><testcase classname="tests.test_parameters.TestParameters" name="test_bridge_priority_invalid[12289]" time="0.056" /><testcase classname="tests.test_parameters.TestParameters" name="test_bridge_priority_invalid[70000]" time="0.051" /><testcase classname="tests.test_parameters.TestParameters" name="test_hello_time" time="6.421" /><testcase classname="tests.test_parameters.TestParameters" name="test_forward_delay" time="6.246" /><testcase classname="tests.test_parameters.TestParameters" name="test_max_age" time="6.246" /><testcase classname="tests.test_parameters.TestParameters" name="test_port_cost" time="135.262" /><testcase classname="tests.test_parameters.TestParameters" name="test_parameter_persistence" time="3.537" /><testcase classname="tests.test_parameters.TestParameters" name="test_parameter_boundaries" time="0.854" /><testcase classname="tests.test_protocol_conformance" name="test_port_role_assignment_simplified" time="0.780"><error message="failed on setup with &quot;file C:\Users\30380\OneDrive\101_Schneider\05_EAE_rstp_test_framework\tests\test_protocol_conformance.py, line 32&#10;  def test_port_role_assignment_simplified(self, dut_manager, test_nodes,&#10;E       fixture 'self' not found&#10;&gt;       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, convergence_monitor, doctest_namespace, dut_manager, event_loop_policy, extra, extras, fault_injector, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, include_metadata_in_junit_xml, logger, metadata, monkeypatch, network_topology, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, rstp_analyzer, test_config, test_nodes, test_results, test_setup_teardown, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, traffic_generator, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vmware_controller, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;C:\Users\30380\OneDrive\101_Schneider\05_EAE_rstp_test_framework\tests\test_protocol_conformance.py:32&quot;">file C:\Users\30380\OneDrive\101_Schneider\05_EAE_rstp_test_framework\tests\test_protocol_conformance.py, line 32
  def test_port_role_assignment_simplified(self, dut_manager, test_nodes,
E       fixture 'self' not found
&gt;       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, convergence_monitor, doctest_namespace, dut_manager, event_loop_policy, extra, extras, fault_injector, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, include_metadata_in_junit_xml, logger, metadata, monkeypatch, network_topology, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, rstp_analyzer, test_config, test_nodes, test_results, test_setup_teardown, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, traffic_generator, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, vmware_controller, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\30380\OneDrive\101_Schneider\05_EAE_rstp_test_framework\tests\test_protocol_conformance.py:32</error></testcase><testcase classname="tests.test_protocol_conformance.TestProtocolConformance" name="test_root_bridge_election" time="71.321"><failure message="Failed: DUT的RSTP实现不符合IEEE 802.1D标准。设置最低优先级后仍不是根桥。这是DUT的问题，不是测试脚本的问题。">self = &lt;test_protocol_conformance.TestProtocolConformance object at 0x000001A9E6CA4190&gt;
dut_manager = &lt;src.ssh_manager.SSHManager object at 0x000001A9E6C87850&gt;
test_nodes = [&lt;src.ssh_manager.SSHManager object at 0x000001A9E6E0D7C0&gt;, &lt;src.ssh_manager.SSHManager object at 0x000001A9E6CFFF20&gt;]
network_topology = &lt;src.network_topology.NetworkTopology object at 0x000001A9E6CBB820&gt;
rstp_analyzer = &lt;src.rstp_analyzer.RSTPAnalyzer object at 0x000001A9E6C0BD10&gt;

    def test_root_bridge_election(self, dut_manager, test_nodes,
                                network_topology, rstp_analyzer):
        """TC.AUTO.1.1: 根网桥选举测试"""
        logger.info("开始根网桥选举测试")
    
        # 创建环形拓扑
        network_topology.create_ring_topology(use_rstp=True)
    
        # 等待初始拓扑稳定
        time.sleep(3)
    
        # 确定DUT的正确网桥名称
        logger.info("=== 检查DUT网桥配置 ===")
        if hasattr(dut_manager, 'execute'):
            execute_method = dut_manager.execute
        elif hasattr(dut_manager, 'run'):
            execute_method = dut_manager.run
        else:
            execute_method = dut_manager.send_command
    
        # 查找正确的测试网桥（应该包含测试接口）
        bridge_name = None
        try:
            # 首先检查是否存在br0（常用的测试网桥名）
            result = execute_method("ip link show br0")
            if isinstance(result, tuple) and result[2] == 0:  # 命令成功
                bridge_name = "br0"
                logger.info("找到测试网桥: br0")
            else:
                # 查找包含eth0的网桥
                result = execute_method("bridge link show | grep 'master'")
                logger.info(f"网桥端口信息: {result}")
    
                # 从eth0找到它所属的网桥
                result = execute_method("ip link show eth0")
                if isinstance(result, tuple):
                    output = result[0]
                    # 查找 master 字段
                    import re
                    master_match = re.search(r'master\s+(\S+)', output)
                    if master_match:
                        bridge_name = master_match.group(1)
                        logger.info(f"eth0所属网桥: {bridge_name}")
    
                # 如果还是没找到，尝试创建br0
                if not bridge_name:
                    logger.warning("未找到测试网桥，尝试创建br0")
                    execute_method("sudo ip link add br0 type bridge")
                    execute_method("sudo ip link set br0 up")
                    execute_method("sudo ip link set eth0 master br0")
                    execute_method("sudo ip link set eth1 master br0 2&gt;/dev/null || true")
                    execute_method("sudo ip link set eth2 master br0 2&gt;/dev/null || true")
                    execute_method("sudo bridge vlan add dev br0 vid 1 self")
                    bridge_name = "br0"
                    time.sleep(2)
    
            if bridge_name:
                # 确保STP已启用
                result = execute_method(f"echo 2 | sudo tee /sys/class/net/{bridge_name}/bridge/stp_state")
                logger.info(f"启用{bridge_name}的RSTP")
    
                # 验证STP状态
                stp_state = execute_method(f"cat /sys/class/net/{bridge_name}/bridge/stp_state")
                logger.info(f"{bridge_name} STP状态: {stp_state}")
            else:
                logger.error("无法确定测试网桥")
                bridge_name = "br0"  # 使用默认值
    
        except Exception as e:
            logger.warning(f"网桥检查出错: {e}")
            bridge_name = "br0"
    
        # 重新获取网桥信息确保分析器使用正确的网桥
        logger.info("=== 初始网桥状态 ===")
        initial_info = rstp_analyzer.get_bridge_info()
    
        # 检查端口数量
        active_ports = [p for p in initial_info.ports.values() if p.state != PortState.DISABLED]
        logger.info(f"活动端口数: {len(active_ports)}")
    
        if len(active_ports) &lt; 2:
            logger.warning("活动端口不足，尝试启用更多端口")
            for iface in ['eth0', 'eth1', 'eth2']:
                try:
                    execute_method(f"sudo ip link set {iface} up")
                    execute_method(f"sudo ip link set {iface} master {bridge_name}")
                except:
                    pass
            time.sleep(3)
            initial_info = rstp_analyzer.get_bridge_info()
            active_ports = [p for p in initial_info.ports.values() if p.state != PortState.DISABLED]
    
        # 显示所有端口信息
        logger.info("初始端口状态:")
        for port_name, port_info in initial_info.ports.items():
            if port_info.state != PortState.DISABLED:
                logger.info(f"  {port_name}: 角色={port_info.role.value}, 状态={port_info.state.value}")
    
        has_root_port_initial = any(
            port.role == PortRole.ROOT
            for port in initial_info.ports.values()
            if port.state != PortState.DISABLED
        )
        logger.info(f"初始状态 - DUT有Root Port: {has_root_port_initial}")
    
        # 设置节点优先级
        logger.info("=== 配置网桥优先级 ===")
    
        # TestNode1 设置为最低优先级（应该成为根桥）
        logger.info("设置TestNode1优先级为16384")
        NetworkTopology.execute_bridge_command(test_nodes[0], "set_priority", priority=16384)
    
        # DUT设置为较高优先级
        logger.info("设置DUT优先级为32768")
        try:
            # 使用多种方法设置优先级
            cmd1 = f"sudo ip link set {bridge_name} type bridge priority 32768"
            result = execute_method(cmd1)
            logger.info(f"ip命令设置结果: {result}")
    
            # 直接写入sysfs
            cmd2 = f"echo 32768 | sudo tee /sys/class/net/{bridge_name}/bridge/priority"
            result = execute_method(cmd2)
            logger.info(f"sysfs设置结果: {result}")
    
        except Exception as e:
            logger.error(f"设置DUT优先级失败: {e}")
    
        # TestNode2设置中间优先级
        if len(test_nodes) &gt; 1:
            logger.info("设置TestNode2优先级为24576")
            NetworkTopology.execute_bridge_command(test_nodes[1], "set_priority", priority=24576)
    
        # 等待收敛
        logger.info("等待RSTP收敛...")
        time.sleep(10)
    
        # 第一阶段验证
        logger.info("=== 第一阶段验证 ===")
        info_phase1 = rstp_analyzer.get_bridge_info()
    
        # 验证优先级
        try:
            priority = execute_method(f"cat /sys/class/net/{bridge_name}/bridge/priority")
            priority_value = priority[0].strip() if isinstance(priority, tuple) else str(priority).strip()
            logger.info(f"DUT当前优先级: {priority_value}")
            assert priority_value == "32768", f"优先级设置失败，期望32768，实际{priority_value}"
        except Exception as e:
            logger.warning(f"优先级验证失败: {e}")
    
        # 分析端口角色
        has_root_port = False
        for port_name, port_info in info_phase1.ports.items():
            if port_info.state != PortState.DISABLED:
                logger.info(f"  {port_name}: 角色={port_info.role.value}")
                if port_info.role == PortRole.ROOT:
                    has_root_port = True
    
        if has_root_port:
            logger.info("✓ 第一阶段通过：DUT有Root Port，不是根桥")
        else:
            # 如果没有Root Port，检查是否所有端口都是Designated
            all_designated = all(
                p.role == PortRole.DESIGNATED
                for p in info_phase1.ports.values()
                if p.state != PortState.DISABLED
            )
            if all_designated and len([p for p in info_phase1.ports.values() if p.state != PortState.DISABLED]) &gt; 0:
                logger.error("DUT是根桥（所有端口都是Designated），但不应该是")
                # 这可能是因为其他节点的优先级设置失败
                logger.info("检查其他节点的优先级...")
                for i, node in enumerate(test_nodes):
                    try:
                        if hasattr(node, 'execute'):
                            node_exec = node.execute
                        else:
                            node_exec = node.send_command
                        result = node_exec("cat /sys/class/net/br0/bridge/priority")
                        logger.info(f"TestNode{i+1}优先级: {result}")
                    except:
                        pass
    
        # 第二阶段：设置DUT为最低优先级
        logger.info("\n=== 第二阶段：DUT应成为根桥 ===")
        logger.info("设置DUT优先级为12288（最低）")
    
        try:
            # 设置最低优先级
            execute_method(f"sudo ip link set {bridge_name} type bridge priority 12288")
            execute_method(f"echo 12288 | sudo tee /sys/class/net/{bridge_name}/bridge/priority")
    
            # 验证设置
            priority = execute_method(f"cat /sys/class/net/{bridge_name}/bridge/priority")
            priority_value = priority[0].strip() if isinstance(priority, tuple) else str(priority).strip()
            logger.info(f"设置后优先级: {priority_value}")
    
        except Exception as e:
            logger.error(f"设置最低优先级失败: {e}")
    
        # 等待收敛
        logger.info("等待RSTP重新收敛...")
        time.sleep(10)
    
        # 最终验证
        logger.info("=== 最终验证 ===")
        final_info = rstp_analyzer.get_bridge_info()
    
        # 分析最终状态
        final_has_root_port = False
        designated_count = 0
    
        for port_name, port_info in final_info.ports.items():
            if port_info.state != PortState.DISABLED:
                logger.info(f"  {port_name}: 角色={port_info.role.value}, 状态={port_info.state.value}")
                if port_info.role == PortRole.ROOT:
                    final_has_root_port = True
                elif port_info.role == PortRole.DESIGNATED:
                    designated_count += 1
    
        # 判断测试结果
        if not final_has_root_port and designated_count &gt; 0:
            logger.info("✓ DUT成为根桥")
            # 验证所有端口
            for port_name, port_info in final_info.ports.items():
                if port_info.state != PortState.DISABLED:
                    assert port_info.role == PortRole.DESIGNATED, \
                        f"根桥端口{port_name}应是Designated，实际{port_info.role.value}"
                    assert port_info.state == PortState.FORWARDING, \
                        f"根桥端口{port_name}应是Forwarding，实际{port_info.state.value}"
        else:
            # 测试失败 - DUT的RSTP实现可能有问题
            logger.error("DUT RSTP实现问题诊断:")
            logger.error(f"1. DUT优先级已设置为12288（最低）")
            logger.error(f"2. 但DUT仍有Root Port: {final_has_root_port}")
            logger.error(f"3. Designated端口数: {designated_count}")
            logger.error("可能的原因:")
            logger.error("- DUT的RSTP实现不符合标准")
            logger.error("- DUT没有正确处理优先级变化")
            logger.error("- DUT的BPDU发送/接收有问题")
    
&gt;           pytest.fail(
                f"DUT的RSTP实现不符合IEEE 802.1D标准。"
                f"设置最低优先级后仍不是根桥。"
                f"这是DUT的问题，不是测试脚本的问题。"
            )
E           Failed: DUT的RSTP实现不符合IEEE 802.1D标准。设置最低优先级后仍不是根桥。这是DUT的问题，不是测试脚本的问题。

tests\test_protocol_conformance.py:313: Failed</failure></testcase><testcase classname="tests.test_protocol_conformance.TestProtocolConformance" name="test_port_role_assignment" time="25.528" /><testcase classname="tests.test_protocol_conformance.TestProtocolConformance" name="test_rstp_protocol_verification" time="53.701" /><testcase classname="tests.test_protocol_conformance.TestProtocolConformance" name="test_topology_change_notification" time="28.432" /><testcase classname="tests.test_security.TestSecurity" name="test_root_bridge_hijack_attack" time="39.617" /><testcase classname="tests.test_security.TestSecurity" name="test_bpdu_flood_attack" time="27.438" /><testcase classname="tests.test_security.TestSecurity" name="test_topology_change_attack" time="39.714" /><testcase classname="tests.test_security.TestSecurity" name="test_mac_spoofing" time="23.886" /><testcase classname="tests.test_security.TestSecurity" name="test_port_security" time="0.010"><skipped type="pytest.skip" message="端口安全功能不可用">C:\Users\30380\OneDrive\101_Schneider\05_EAE_rstp_test_framework\tests\test_security.py:249: 端口安全功能不可用</skipped></testcase></testsuite></testsuites>