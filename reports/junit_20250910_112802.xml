<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="7" skipped="0" tests="7" time="50.159" timestamp="2025-09-10T11:28:03.630015+08:00" hostname="DESKTOP-FDB8GR9"><testcase classname="tests.test_additional_rstp.TestAdditionalRSTP" name="test_port_state_transitions" time="7.509"><failure message="RuntimeError: mstpd配置失败: Forward Delay不正确: 期望15, 实际0; Max Age不正确: 期望20, 实际0">self = &lt;test_additional_rstp.TestAdditionalRSTP object at 0x000001F54E7874D0&gt;
dut_manager = &lt;src.ssh_manager.SSHManager object at 0x000001F54E9492B0&gt;
test_nodes = [&lt;src.ssh_manager.SSHManager object at 0x000001F54E926850&gt;, &lt;src.ssh_manager.SSHManager object at 0x000001F54E9D4050&gt;]
network_topology = &lt;src.network_topology.NetworkTopology object at 0x000001F54E94A900&gt;
rstp_analyzer = &lt;src.rstp_analyzer.RSTPAnalyzer object at 0x000001F54E94AA50&gt;

    def test_port_state_transitions(self, dut_manager, test_nodes,
                                  network_topology, rstp_analyzer):
        """TC.AUTO.1.5: 端口状态转换测试 - 验证Learning状态转换"""
        logger.info("开始端口状态转换测试")
    
        # 创建环形拓扑
&gt;       network_topology.create_ring_topology(use_rstp=True)

tests\test_additional_rstp.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\network_topology.py:482: in create_ring_topology
    self.configure_bridge_rstp(node, bridge_name, priority, interfaces)
src\network_topology.py:221: in configure_bridge_rstp
    self._configure_rstp_mstpd(node, bridge, priority)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;src.network_topology.NetworkTopology object at 0x000001F54E94A900&gt;
node = &lt;src.ssh_manager.SSHManager object at 0x000001F54E926850&gt;, bridge = 'br0', priority = 36864

    def _configure_rstp_mstpd(self, node: SSHManager, bridge: str, priority: int):
        """使用mstpd配置RSTP"""
        commands = [
            f"brctl addbr {bridge}",
            f"brctl stp {bridge} on",   # 关键：打开 STP，否则 mstpd 不会接管
            f"mstpctl setforcevers {bridge} rstp",
            f"mstpctl setbridgeprio {bridge} {priority}",
            f"mstpctl setbridgehello {bridge} 2",
            f"mstpctl setbridgefdelay {bridge} 15",
            f"mstpctl setbridgemaxage {bridge} 20",
            f"mstpctl settxholdcount {bridge} 6",
        ]
    
        failed_commands = []
        for cmd in commands:
            stdout, stderr, code = node.execute_sudo(cmd)
            if code != 0 and "exists" not in stderr:
                self.logger.warning(f"MSTPD命令警告: {cmd}\n{stderr}")
                failed_commands.append((cmd, stderr))
    
        # 等待配置生效
        time.sleep(2)
    
        # 验证配置是否成功应用
        self.logger.info(f"验证{bridge}的mstpd配置...")
        stdout, stderr, code = node.execute_sudo(f"mstpctl showbridge {bridge}")
    
        if code == 0:
            # 解析配置验证结果
            config_ok = True
            diagnostics = []
    
            # 检查协议版本
            if "rstp" not in stdout.lower():
                config_ok = False
                diagnostics.append("协议版本未设置为RSTP")
    
            # 检查关键参数
            import re
    
            # 检查Hello Time (应该是2秒)
            hello_match = re.search(r'hello time\s+(\d+)', stdout, re.IGNORECASE)
            if hello_match:
                hello_time = int(hello_match.group(1))
                if hello_time != 2:
                    diagnostics.append(f"Hello Time不正确: 期望2, 实际{hello_time}")
            else:
                diagnostics.append("无法获取Hello Time参数")
    
            # 检查Forward Delay (应该是15秒)
            fd_match = re.search(r'forward delay\s+(\d+)', stdout, re.IGNORECASE)
            if fd_match:
                fd = int(fd_match.group(1))
                if fd != 15:
                    diagnostics.append(f"Forward Delay不正确: 期望15, 实际{fd}")
            else:
                diagnostics.append("无法获取Forward Delay参数")
    
            # 检查Max Age (应该是20秒)
            maxage_match = re.search(r'max age\s+(\d+)', stdout, re.IGNORECASE)
            if maxage_match:
                maxage = int(maxage_match.group(1))
                if maxage != 20:
                    diagnostics.append(f"Max Age不正确: 期望20, 实际{maxage}")
            else:
                diagnostics.append("无法获取Max Age参数")
    
            # 输出诊断信息
            if diagnostics:
                self.logger.warning(f"配置验证发现问题: {'; '.join(diagnostics)}")
                self.logger.info(f"mstpctl showbridge输出:\n{stdout}")
    
                if failed_commands:
                    self.logger.error(f"关键配置失败，失败的命令: {failed_commands}")
&gt;                   raise RuntimeError(f"mstpd配置失败: {'; '.join(diagnostics)}")
E                   RuntimeError: mstpd配置失败: Forward Delay不正确: 期望15, 实际0; Max Age不正确: 期望20, 实际0

src\network_topology.py:340: RuntimeError</failure></testcase><testcase classname="tests.test_additional_rstp.TestAdditionalRSTP" name="test_bpdu_propagation_and_keepalive" time="6.752"><failure message="RuntimeError: mstpd配置失败: Forward Delay不正确: 期望15, 实际0; Max Age不正确: 期望20, 实际0">self = &lt;test_additional_rstp.TestAdditionalRSTP object at 0x000001F54E7879D0&gt;
dut_manager = &lt;src.ssh_manager.SSHManager object at 0x000001F54E9492B0&gt;
test_nodes = [&lt;src.ssh_manager.SSHManager object at 0x000001F54E926850&gt;, &lt;src.ssh_manager.SSHManager object at 0x000001F54E9D4050&gt;]
network_topology = &lt;src.network_topology.NetworkTopology object at 0x000001F54E94A900&gt;
rstp_analyzer = &lt;src.rstp_analyzer.RSTPAnalyzer object at 0x000001F54E9D5BD0&gt;

    def test_bpdu_propagation_and_keepalive(self, dut_manager, test_nodes,
                                          network_topology, rstp_analyzer):
        """TC.AUTO.1.6: BPDU传播和保活机制测试"""
        logger.info("开始BPDU传播和保活机制测试")
    
        # 创建环形拓扑
&gt;       network_topology.create_ring_topology(use_rstp=True)

tests\test_additional_rstp.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\network_topology.py:482: in create_ring_topology
    self.configure_bridge_rstp(node, bridge_name, priority, interfaces)
src\network_topology.py:221: in configure_bridge_rstp
    self._configure_rstp_mstpd(node, bridge, priority)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;src.network_topology.NetworkTopology object at 0x000001F54E94A900&gt;
node = &lt;src.ssh_manager.SSHManager object at 0x000001F54E926850&gt;, bridge = 'br0', priority = 36864

    def _configure_rstp_mstpd(self, node: SSHManager, bridge: str, priority: int):
        """使用mstpd配置RSTP"""
        commands = [
            f"brctl addbr {bridge}",
            f"brctl stp {bridge} on",   # 关键：打开 STP，否则 mstpd 不会接管
            f"mstpctl setforcevers {bridge} rstp",
            f"mstpctl setbridgeprio {bridge} {priority}",
            f"mstpctl setbridgehello {bridge} 2",
            f"mstpctl setbridgefdelay {bridge} 15",
            f"mstpctl setbridgemaxage {bridge} 20",
            f"mstpctl settxholdcount {bridge} 6",
        ]
    
        failed_commands = []
        for cmd in commands:
            stdout, stderr, code = node.execute_sudo(cmd)
            if code != 0 and "exists" not in stderr:
                self.logger.warning(f"MSTPD命令警告: {cmd}\n{stderr}")
                failed_commands.append((cmd, stderr))
    
        # 等待配置生效
        time.sleep(2)
    
        # 验证配置是否成功应用
        self.logger.info(f"验证{bridge}的mstpd配置...")
        stdout, stderr, code = node.execute_sudo(f"mstpctl showbridge {bridge}")
    
        if code == 0:
            # 解析配置验证结果
            config_ok = True
            diagnostics = []
    
            # 检查协议版本
            if "rstp" not in stdout.lower():
                config_ok = False
                diagnostics.append("协议版本未设置为RSTP")
    
            # 检查关键参数
            import re
    
            # 检查Hello Time (应该是2秒)
            hello_match = re.search(r'hello time\s+(\d+)', stdout, re.IGNORECASE)
            if hello_match:
                hello_time = int(hello_match.group(1))
                if hello_time != 2:
                    diagnostics.append(f"Hello Time不正确: 期望2, 实际{hello_time}")
            else:
                diagnostics.append("无法获取Hello Time参数")
    
            # 检查Forward Delay (应该是15秒)
            fd_match = re.search(r'forward delay\s+(\d+)', stdout, re.IGNORECASE)
            if fd_match:
                fd = int(fd_match.group(1))
                if fd != 15:
                    diagnostics.append(f"Forward Delay不正确: 期望15, 实际{fd}")
            else:
                diagnostics.append("无法获取Forward Delay参数")
    
            # 检查Max Age (应该是20秒)
            maxage_match = re.search(r'max age\s+(\d+)', stdout, re.IGNORECASE)
            if maxage_match:
                maxage = int(maxage_match.group(1))
                if maxage != 20:
                    diagnostics.append(f"Max Age不正确: 期望20, 实际{maxage}")
            else:
                diagnostics.append("无法获取Max Age参数")
    
            # 输出诊断信息
            if diagnostics:
                self.logger.warning(f"配置验证发现问题: {'; '.join(diagnostics)}")
                self.logger.info(f"mstpctl showbridge输出:\n{stdout}")
    
                if failed_commands:
                    self.logger.error(f"关键配置失败，失败的命令: {failed_commands}")
&gt;                   raise RuntimeError(f"mstpd配置失败: {'; '.join(diagnostics)}")
E                   RuntimeError: mstpd配置失败: Forward Delay不正确: 期望15, 实际0; Max Age不正确: 期望20, 实际0

src\network_topology.py:340: RuntimeError</failure></testcase><testcase classname="tests.test_additional_rstp.TestAdditionalRSTP" name="test_disabled_port_exclusion_enhanced" time="6.693"><failure message="RuntimeError: mstpd配置失败: Forward Delay不正确: 期望15, 实际0; Max Age不正确: 期望20, 实际0">self = &lt;test_additional_rstp.TestAdditionalRSTP object at 0x000001F54E6F3490&gt;
dut_manager = &lt;src.ssh_manager.SSHManager object at 0x000001F54E9492B0&gt;
test_nodes = [&lt;src.ssh_manager.SSHManager object at 0x000001F54E926850&gt;, &lt;src.ssh_manager.SSHManager object at 0x000001F54E9D4050&gt;]
network_topology = &lt;src.network_topology.NetworkTopology object at 0x000001F54E94A900&gt;
rstp_analyzer = &lt;src.rstp_analyzer.RSTPAnalyzer object at 0x000001F54E9D5D10&gt;

    def test_disabled_port_exclusion_enhanced(self, dut_manager, test_nodes,
                                            network_topology, rstp_analyzer):
        """TC.AUTO.1.7: 增强的禁用端口排除测试"""
        logger.info("开始增强的禁用端口排除测试")
    
        # 创建环形拓扑
&gt;       network_topology.create_ring_topology(use_rstp=True)

tests\test_additional_rstp.py:297: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\network_topology.py:482: in create_ring_topology
    self.configure_bridge_rstp(node, bridge_name, priority, interfaces)
src\network_topology.py:221: in configure_bridge_rstp
    self._configure_rstp_mstpd(node, bridge, priority)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;src.network_topology.NetworkTopology object at 0x000001F54E94A900&gt;
node = &lt;src.ssh_manager.SSHManager object at 0x000001F54E926850&gt;, bridge = 'br0', priority = 36864

    def _configure_rstp_mstpd(self, node: SSHManager, bridge: str, priority: int):
        """使用mstpd配置RSTP"""
        commands = [
            f"brctl addbr {bridge}",
            f"brctl stp {bridge} on",   # 关键：打开 STP，否则 mstpd 不会接管
            f"mstpctl setforcevers {bridge} rstp",
            f"mstpctl setbridgeprio {bridge} {priority}",
            f"mstpctl setbridgehello {bridge} 2",
            f"mstpctl setbridgefdelay {bridge} 15",
            f"mstpctl setbridgemaxage {bridge} 20",
            f"mstpctl settxholdcount {bridge} 6",
        ]
    
        failed_commands = []
        for cmd in commands:
            stdout, stderr, code = node.execute_sudo(cmd)
            if code != 0 and "exists" not in stderr:
                self.logger.warning(f"MSTPD命令警告: {cmd}\n{stderr}")
                failed_commands.append((cmd, stderr))
    
        # 等待配置生效
        time.sleep(2)
    
        # 验证配置是否成功应用
        self.logger.info(f"验证{bridge}的mstpd配置...")
        stdout, stderr, code = node.execute_sudo(f"mstpctl showbridge {bridge}")
    
        if code == 0:
            # 解析配置验证结果
            config_ok = True
            diagnostics = []
    
            # 检查协议版本
            if "rstp" not in stdout.lower():
                config_ok = False
                diagnostics.append("协议版本未设置为RSTP")
    
            # 检查关键参数
            import re
    
            # 检查Hello Time (应该是2秒)
            hello_match = re.search(r'hello time\s+(\d+)', stdout, re.IGNORECASE)
            if hello_match:
                hello_time = int(hello_match.group(1))
                if hello_time != 2:
                    diagnostics.append(f"Hello Time不正确: 期望2, 实际{hello_time}")
            else:
                diagnostics.append("无法获取Hello Time参数")
    
            # 检查Forward Delay (应该是15秒)
            fd_match = re.search(r'forward delay\s+(\d+)', stdout, re.IGNORECASE)
            if fd_match:
                fd = int(fd_match.group(1))
                if fd != 15:
                    diagnostics.append(f"Forward Delay不正确: 期望15, 实际{fd}")
            else:
                diagnostics.append("无法获取Forward Delay参数")
    
            # 检查Max Age (应该是20秒)
            maxage_match = re.search(r'max age\s+(\d+)', stdout, re.IGNORECASE)
            if maxage_match:
                maxage = int(maxage_match.group(1))
                if maxage != 20:
                    diagnostics.append(f"Max Age不正确: 期望20, 实际{maxage}")
            else:
                diagnostics.append("无法获取Max Age参数")
    
            # 输出诊断信息
            if diagnostics:
                self.logger.warning(f"配置验证发现问题: {'; '.join(diagnostics)}")
                self.logger.info(f"mstpctl showbridge输出:\n{stdout}")
    
                if failed_commands:
                    self.logger.error(f"关键配置失败，失败的命令: {failed_commands}")
&gt;                   raise RuntimeError(f"mstpd配置失败: {'; '.join(diagnostics)}")
E                   RuntimeError: mstpd配置失败: Forward Delay不正确: 期望15, 实际0; Max Age不正确: 期望20, 实际0

src\network_topology.py:340: RuntimeError</failure></testcase><testcase classname="tests.test_advanced_rstp_mechanisms.TestAdvancedRSTPMechanisms" name="test_proposal_agreement_handshake" time="7.443"><failure message="RuntimeError: mstpd配置失败: Forward Delay不正确: 期望15, 实际0; Max Age不正确: 期望20, 实际0">self = &lt;test_advanced_rstp_mechanisms.TestAdvancedRSTPMechanisms object at 0x000001F54E787B10&gt;
dut_manager = &lt;src.ssh_manager.SSHManager object at 0x000001F54E93E9E0&gt;
test_nodes = [&lt;src.ssh_manager.SSHManager object at 0x000001F54EA802B0&gt;, &lt;src.ssh_manager.SSHManager object at 0x000001F54E97AB10&gt;]
network_topology = &lt;src.network_topology.NetworkTopology object at 0x000001F54E9D4A50&gt;
rstp_analyzer = &lt;src.rstp_analyzer.RSTPAnalyzer object at 0x000001F54EA80E90&gt;
convergence_monitor = &lt;conftest.convergence_monitor.&lt;locals&gt;.ConvergenceMonitor object at 0x000001F54E9497F0&gt;

    def test_proposal_agreement_handshake(self, dut_manager, test_nodes,
                                         network_topology, rstp_analyzer,
                                         convergence_monitor):
        """测试RSTP的Proposal/Agreement握手机制
    
        验证点：
        1. 上游交换机发送带Proposal标志的BPDU
        2. 下游交换机进入同步状态，阻塞其他端口
        3. 下游交换机回复Agreement标志的BPDU
        4. 上游交换机快速转换到Forwarding状态
        """
        logger = logging.getLogger(__name__)
        logger.info("开始测试RSTP Proposal/Agreement握手机制")
    
        # 1. 创建环形拓扑：DUT - TestNode1 - TestNode2
&gt;       network_topology.create_ring_topology(use_rstp=True)

tests\test_advanced_rstp_mechanisms.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\network_topology.py:482: in create_ring_topology
    self.configure_bridge_rstp(node, bridge_name, priority, interfaces)
src\network_topology.py:221: in configure_bridge_rstp
    self._configure_rstp_mstpd(node, bridge, priority)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;src.network_topology.NetworkTopology object at 0x000001F54E9D4A50&gt;
node = &lt;src.ssh_manager.SSHManager object at 0x000001F54EA802B0&gt;, bridge = 'br0', priority = 36864

    def _configure_rstp_mstpd(self, node: SSHManager, bridge: str, priority: int):
        """使用mstpd配置RSTP"""
        commands = [
            f"brctl addbr {bridge}",
            f"brctl stp {bridge} on",   # 关键：打开 STP，否则 mstpd 不会接管
            f"mstpctl setforcevers {bridge} rstp",
            f"mstpctl setbridgeprio {bridge} {priority}",
            f"mstpctl setbridgehello {bridge} 2",
            f"mstpctl setbridgefdelay {bridge} 15",
            f"mstpctl setbridgemaxage {bridge} 20",
            f"mstpctl settxholdcount {bridge} 6",
        ]
    
        failed_commands = []
        for cmd in commands:
            stdout, stderr, code = node.execute_sudo(cmd)
            if code != 0 and "exists" not in stderr:
                self.logger.warning(f"MSTPD命令警告: {cmd}\n{stderr}")
                failed_commands.append((cmd, stderr))
    
        # 等待配置生效
        time.sleep(2)
    
        # 验证配置是否成功应用
        self.logger.info(f"验证{bridge}的mstpd配置...")
        stdout, stderr, code = node.execute_sudo(f"mstpctl showbridge {bridge}")
    
        if code == 0:
            # 解析配置验证结果
            config_ok = True
            diagnostics = []
    
            # 检查协议版本
            if "rstp" not in stdout.lower():
                config_ok = False
                diagnostics.append("协议版本未设置为RSTP")
    
            # 检查关键参数
            import re
    
            # 检查Hello Time (应该是2秒)
            hello_match = re.search(r'hello time\s+(\d+)', stdout, re.IGNORECASE)
            if hello_match:
                hello_time = int(hello_match.group(1))
                if hello_time != 2:
                    diagnostics.append(f"Hello Time不正确: 期望2, 实际{hello_time}")
            else:
                diagnostics.append("无法获取Hello Time参数")
    
            # 检查Forward Delay (应该是15秒)
            fd_match = re.search(r'forward delay\s+(\d+)', stdout, re.IGNORECASE)
            if fd_match:
                fd = int(fd_match.group(1))
                if fd != 15:
                    diagnostics.append(f"Forward Delay不正确: 期望15, 实际{fd}")
            else:
                diagnostics.append("无法获取Forward Delay参数")
    
            # 检查Max Age (应该是20秒)
            maxage_match = re.search(r'max age\s+(\d+)', stdout, re.IGNORECASE)
            if maxage_match:
                maxage = int(maxage_match.group(1))
                if maxage != 20:
                    diagnostics.append(f"Max Age不正确: 期望20, 实际{maxage}")
            else:
                diagnostics.append("无法获取Max Age参数")
    
            # 输出诊断信息
            if diagnostics:
                self.logger.warning(f"配置验证发现问题: {'; '.join(diagnostics)}")
                self.logger.info(f"mstpctl showbridge输出:\n{stdout}")
    
                if failed_commands:
                    self.logger.error(f"关键配置失败，失败的命令: {failed_commands}")
&gt;                   raise RuntimeError(f"mstpd配置失败: {'; '.join(diagnostics)}")
E                   RuntimeError: mstpd配置失败: Forward Delay不正确: 期望15, 实际0; Max Age不正确: 期望20, 实际0

src\network_topology.py:340: RuntimeError</failure></testcase><testcase classname="tests.test_advanced_rstp_mechanisms.TestAdvancedRSTPMechanisms" name="test_tcn_topology_change_notification" time="6.704"><failure message="RuntimeError: mstpd配置失败: Forward Delay不正确: 期望15, 实际0; Max Age不正确: 期望20, 实际0">self = &lt;test_advanced_rstp_mechanisms.TestAdvancedRSTPMechanisms object at 0x000001F54E787C50&gt;
dut_manager = &lt;src.ssh_manager.SSHManager object at 0x000001F54E93E9E0&gt;
test_nodes = [&lt;src.ssh_manager.SSHManager object at 0x000001F54EA802B0&gt;, &lt;src.ssh_manager.SSHManager object at 0x000001F54E97AB10&gt;]
network_topology = &lt;src.network_topology.NetworkTopology object at 0x000001F54E9D4A50&gt;
rstp_analyzer = &lt;src.rstp_analyzer.RSTPAnalyzer object at 0x000001F54EA81350&gt;

    def test_tcn_topology_change_notification(self, dut_manager, test_nodes,
                                             network_topology, rstp_analyzer):
        """测试TCN拓扑变更通知机制
    
        验证点：
        1. 正确的TCN触发条件（非边缘端口从Discarding/Learning转到Forwarding）
        2. TCN的泛洪传播机制（TC标志位BPDU从所有非边缘指定端口和根端口发出）
        3. MAC地址表老化时间缩短到Forward Delay值
        """
        logger = logging.getLogger(__name__)
        logger.info("开始测试TCN拓扑变更通知机制")
    
        # 1. 创建环形拓扑以便观察TCN传播
&gt;       network_topology.create_ring_topology(use_rstp=True)

tests\test_advanced_rstp_mechanisms.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\network_topology.py:482: in create_ring_topology
    self.configure_bridge_rstp(node, bridge_name, priority, interfaces)
src\network_topology.py:221: in configure_bridge_rstp
    self._configure_rstp_mstpd(node, bridge, priority)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;src.network_topology.NetworkTopology object at 0x000001F54E9D4A50&gt;
node = &lt;src.ssh_manager.SSHManager object at 0x000001F54EA802B0&gt;, bridge = 'br0', priority = 36864

    def _configure_rstp_mstpd(self, node: SSHManager, bridge: str, priority: int):
        """使用mstpd配置RSTP"""
        commands = [
            f"brctl addbr {bridge}",
            f"brctl stp {bridge} on",   # 关键：打开 STP，否则 mstpd 不会接管
            f"mstpctl setforcevers {bridge} rstp",
            f"mstpctl setbridgeprio {bridge} {priority}",
            f"mstpctl setbridgehello {bridge} 2",
            f"mstpctl setbridgefdelay {bridge} 15",
            f"mstpctl setbridgemaxage {bridge} 20",
            f"mstpctl settxholdcount {bridge} 6",
        ]
    
        failed_commands = []
        for cmd in commands:
            stdout, stderr, code = node.execute_sudo(cmd)
            if code != 0 and "exists" not in stderr:
                self.logger.warning(f"MSTPD命令警告: {cmd}\n{stderr}")
                failed_commands.append((cmd, stderr))
    
        # 等待配置生效
        time.sleep(2)
    
        # 验证配置是否成功应用
        self.logger.info(f"验证{bridge}的mstpd配置...")
        stdout, stderr, code = node.execute_sudo(f"mstpctl showbridge {bridge}")
    
        if code == 0:
            # 解析配置验证结果
            config_ok = True
            diagnostics = []
    
            # 检查协议版本
            if "rstp" not in stdout.lower():
                config_ok = False
                diagnostics.append("协议版本未设置为RSTP")
    
            # 检查关键参数
            import re
    
            # 检查Hello Time (应该是2秒)
            hello_match = re.search(r'hello time\s+(\d+)', stdout, re.IGNORECASE)
            if hello_match:
                hello_time = int(hello_match.group(1))
                if hello_time != 2:
                    diagnostics.append(f"Hello Time不正确: 期望2, 实际{hello_time}")
            else:
                diagnostics.append("无法获取Hello Time参数")
    
            # 检查Forward Delay (应该是15秒)
            fd_match = re.search(r'forward delay\s+(\d+)', stdout, re.IGNORECASE)
            if fd_match:
                fd = int(fd_match.group(1))
                if fd != 15:
                    diagnostics.append(f"Forward Delay不正确: 期望15, 实际{fd}")
            else:
                diagnostics.append("无法获取Forward Delay参数")
    
            # 检查Max Age (应该是20秒)
            maxage_match = re.search(r'max age\s+(\d+)', stdout, re.IGNORECASE)
            if maxage_match:
                maxage = int(maxage_match.group(1))
                if maxage != 20:
                    diagnostics.append(f"Max Age不正确: 期望20, 实际{maxage}")
            else:
                diagnostics.append("无法获取Max Age参数")
    
            # 输出诊断信息
            if diagnostics:
                self.logger.warning(f"配置验证发现问题: {'; '.join(diagnostics)}")
                self.logger.info(f"mstpctl showbridge输出:\n{stdout}")
    
                if failed_commands:
                    self.logger.error(f"关键配置失败，失败的命令: {failed_commands}")
&gt;                   raise RuntimeError(f"mstpd配置失败: {'; '.join(diagnostics)}")
E                   RuntimeError: mstpd配置失败: Forward Delay不正确: 期望15, 实际0; Max Age不正确: 期望20, 实际0

src\network_topology.py:340: RuntimeError</failure></testcase><testcase classname="tests.test_advanced_rstp_mechanisms.TestAdvancedRSTPMechanisms" name="test_edge_port_behavior" time="6.730"><failure message="RuntimeError: mstpd配置失败: Forward Delay不正确: 期望15, 实际0; Max Age不正确: 期望20, 实际0">self = &lt;test_advanced_rstp_mechanisms.TestAdvancedRSTPMechanisms object at 0x000001F54E6F3360&gt;
dut_manager = &lt;src.ssh_manager.SSHManager object at 0x000001F54E93E9E0&gt;
test_nodes = [&lt;src.ssh_manager.SSHManager object at 0x000001F54EA802B0&gt;, &lt;src.ssh_manager.SSHManager object at 0x000001F54E97AB10&gt;]
network_topology = &lt;src.network_topology.NetworkTopology object at 0x000001F54E9D4A50&gt;

    def test_edge_port_behavior(self, dut_manager, test_nodes, network_topology):
        """测试边缘端口行为
    
        验证点：
        1. 立即转发（跳过Learning状态）
        2. 不产生TCN
        3. 收到BPDU后失去边缘端口身份
        """
        logger = logging.getLogger(__name__)
        logger.info("开始测试边缘端口行为")
    
        # 1. 创建简单拓扑
&gt;       network_topology.create_ring_topology(use_rstp=True)

tests\test_advanced_rstp_mechanisms.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\network_topology.py:482: in create_ring_topology
    self.configure_bridge_rstp(node, bridge_name, priority, interfaces)
src\network_topology.py:221: in configure_bridge_rstp
    self._configure_rstp_mstpd(node, bridge, priority)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;src.network_topology.NetworkTopology object at 0x000001F54E9D4A50&gt;
node = &lt;src.ssh_manager.SSHManager object at 0x000001F54EA802B0&gt;, bridge = 'br0', priority = 36864

    def _configure_rstp_mstpd(self, node: SSHManager, bridge: str, priority: int):
        """使用mstpd配置RSTP"""
        commands = [
            f"brctl addbr {bridge}",
            f"brctl stp {bridge} on",   # 关键：打开 STP，否则 mstpd 不会接管
            f"mstpctl setforcevers {bridge} rstp",
            f"mstpctl setbridgeprio {bridge} {priority}",
            f"mstpctl setbridgehello {bridge} 2",
            f"mstpctl setbridgefdelay {bridge} 15",
            f"mstpctl setbridgemaxage {bridge} 20",
            f"mstpctl settxholdcount {bridge} 6",
        ]
    
        failed_commands = []
        for cmd in commands:
            stdout, stderr, code = node.execute_sudo(cmd)
            if code != 0 and "exists" not in stderr:
                self.logger.warning(f"MSTPD命令警告: {cmd}\n{stderr}")
                failed_commands.append((cmd, stderr))
    
        # 等待配置生效
        time.sleep(2)
    
        # 验证配置是否成功应用
        self.logger.info(f"验证{bridge}的mstpd配置...")
        stdout, stderr, code = node.execute_sudo(f"mstpctl showbridge {bridge}")
    
        if code == 0:
            # 解析配置验证结果
            config_ok = True
            diagnostics = []
    
            # 检查协议版本
            if "rstp" not in stdout.lower():
                config_ok = False
                diagnostics.append("协议版本未设置为RSTP")
    
            # 检查关键参数
            import re
    
            # 检查Hello Time (应该是2秒)
            hello_match = re.search(r'hello time\s+(\d+)', stdout, re.IGNORECASE)
            if hello_match:
                hello_time = int(hello_match.group(1))
                if hello_time != 2:
                    diagnostics.append(f"Hello Time不正确: 期望2, 实际{hello_time}")
            else:
                diagnostics.append("无法获取Hello Time参数")
    
            # 检查Forward Delay (应该是15秒)
            fd_match = re.search(r'forward delay\s+(\d+)', stdout, re.IGNORECASE)
            if fd_match:
                fd = int(fd_match.group(1))
                if fd != 15:
                    diagnostics.append(f"Forward Delay不正确: 期望15, 实际{fd}")
            else:
                diagnostics.append("无法获取Forward Delay参数")
    
            # 检查Max Age (应该是20秒)
            maxage_match = re.search(r'max age\s+(\d+)', stdout, re.IGNORECASE)
            if maxage_match:
                maxage = int(maxage_match.group(1))
                if maxage != 20:
                    diagnostics.append(f"Max Age不正确: 期望20, 实际{maxage}")
            else:
                diagnostics.append("无法获取Max Age参数")
    
            # 输出诊断信息
            if diagnostics:
                self.logger.warning(f"配置验证发现问题: {'; '.join(diagnostics)}")
                self.logger.info(f"mstpctl showbridge输出:\n{stdout}")
    
                if failed_commands:
                    self.logger.error(f"关键配置失败，失败的命令: {failed_commands}")
&gt;                   raise RuntimeError(f"mstpd配置失败: {'; '.join(diagnostics)}")
E                   RuntimeError: mstpd配置失败: Forward Delay不正确: 期望15, 实际0; Max Age不正确: 期望20, 实际0

src\network_topology.py:340: RuntimeError</failure></testcase><testcase classname="tests.test_advanced_rstp_mechanisms.TestAdvancedRSTPMechanisms" name="test_shared_vs_point_to_point_links" time="6.785"><failure message="RuntimeError: mstpd配置失败: Forward Delay不正确: 期望15, 实际0; Max Age不正确: 期望20, 实际0">self = &lt;test_advanced_rstp_mechanisms.TestAdvancedRSTPMechanisms object at 0x000001F54E6F3820&gt;
dut_manager = &lt;src.ssh_manager.SSHManager object at 0x000001F54E93E9E0&gt;
test_nodes = [&lt;src.ssh_manager.SSHManager object at 0x000001F54EA802B0&gt;, &lt;src.ssh_manager.SSHManager object at 0x000001F54E97AB10&gt;]
network_topology = &lt;src.network_topology.NetworkTopology object at 0x000001F54E9D4A50&gt;
convergence_monitor = &lt;conftest.convergence_monitor.&lt;locals&gt;.ConvergenceMonitor object at 0x000001F54E949940&gt;

    def test_shared_vs_point_to_point_links(self, dut_manager, test_nodes,
                                           network_topology, convergence_monitor):
        """测试不同链路类型的行为差异
    
        验证点：
        1. 点对点链路支持Proposal/Agreement握手
        2. 共享链路回退到基于计时器的收敛
        3. 链路类型的正确识别
        """
        logger = logging.getLogger(__name__)
        logger.info("开始测试不同链路类型的行为差异")
    
        # 1. 创建混合拓扑（包含不同类型的链路）
&gt;       network_topology.create_ring_topology(use_rstp=True)

tests\test_advanced_rstp_mechanisms.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\network_topology.py:482: in create_ring_topology
    self.configure_bridge_rstp(node, bridge_name, priority, interfaces)
src\network_topology.py:221: in configure_bridge_rstp
    self._configure_rstp_mstpd(node, bridge, priority)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;src.network_topology.NetworkTopology object at 0x000001F54E9D4A50&gt;
node = &lt;src.ssh_manager.SSHManager object at 0x000001F54EA802B0&gt;, bridge = 'br0', priority = 36864

    def _configure_rstp_mstpd(self, node: SSHManager, bridge: str, priority: int):
        """使用mstpd配置RSTP"""
        commands = [
            f"brctl addbr {bridge}",
            f"brctl stp {bridge} on",   # 关键：打开 STP，否则 mstpd 不会接管
            f"mstpctl setforcevers {bridge} rstp",
            f"mstpctl setbridgeprio {bridge} {priority}",
            f"mstpctl setbridgehello {bridge} 2",
            f"mstpctl setbridgefdelay {bridge} 15",
            f"mstpctl setbridgemaxage {bridge} 20",
            f"mstpctl settxholdcount {bridge} 6",
        ]
    
        failed_commands = []
        for cmd in commands:
            stdout, stderr, code = node.execute_sudo(cmd)
            if code != 0 and "exists" not in stderr:
                self.logger.warning(f"MSTPD命令警告: {cmd}\n{stderr}")
                failed_commands.append((cmd, stderr))
    
        # 等待配置生效
        time.sleep(2)
    
        # 验证配置是否成功应用
        self.logger.info(f"验证{bridge}的mstpd配置...")
        stdout, stderr, code = node.execute_sudo(f"mstpctl showbridge {bridge}")
    
        if code == 0:
            # 解析配置验证结果
            config_ok = True
            diagnostics = []
    
            # 检查协议版本
            if "rstp" not in stdout.lower():
                config_ok = False
                diagnostics.append("协议版本未设置为RSTP")
    
            # 检查关键参数
            import re
    
            # 检查Hello Time (应该是2秒)
            hello_match = re.search(r'hello time\s+(\d+)', stdout, re.IGNORECASE)
            if hello_match:
                hello_time = int(hello_match.group(1))
                if hello_time != 2:
                    diagnostics.append(f"Hello Time不正确: 期望2, 实际{hello_time}")
            else:
                diagnostics.append("无法获取Hello Time参数")
    
            # 检查Forward Delay (应该是15秒)
            fd_match = re.search(r'forward delay\s+(\d+)', stdout, re.IGNORECASE)
            if fd_match:
                fd = int(fd_match.group(1))
                if fd != 15:
                    diagnostics.append(f"Forward Delay不正确: 期望15, 实际{fd}")
            else:
                diagnostics.append("无法获取Forward Delay参数")
    
            # 检查Max Age (应该是20秒)
            maxage_match = re.search(r'max age\s+(\d+)', stdout, re.IGNORECASE)
            if maxage_match:
                maxage = int(maxage_match.group(1))
                if maxage != 20:
                    diagnostics.append(f"Max Age不正确: 期望20, 实际{maxage}")
            else:
                diagnostics.append("无法获取Max Age参数")
    
            # 输出诊断信息
            if diagnostics:
                self.logger.warning(f"配置验证发现问题: {'; '.join(diagnostics)}")
                self.logger.info(f"mstpctl showbridge输出:\n{stdout}")
    
                if failed_commands:
                    self.logger.error(f"关键配置失败，失败的命令: {failed_commands}")
&gt;                   raise RuntimeError(f"mstpd配置失败: {'; '.join(diagnostics)}")
E                   RuntimeError: mstpd配置失败: Forward Delay不正确: 期望15, 实际0; Max Age不正确: 期望20, 实际0

src\network_topology.py:340: RuntimeError</failure></testcase></testsuite></testsuites>