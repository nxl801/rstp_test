<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="1" time="11.232" timestamp="2025-09-10T11:26:46.946258+08:00" hostname="DESKTOP-FDB8GR9"><testcase classname="tests.test_additional_rstp.TestAdditionalRSTP" name="test_port_state_transitions" time="7.190"><failure message="RuntimeError: mstpd配置失败且无法验证: 失败命令 [('mstpctl setforcevers br0 rstp', ''), ('mstpctl setbridgeprio br0 36864', ''), ('mstpctl setbridgehello br0 2', ''), ('mstpctl setbridgefdelay br0 15', ''), ('mstpctl setbridgemaxage br0 20', ''), ('mstpctl settxholdcount br0 6', '')]">self = &lt;test_additional_rstp.TestAdditionalRSTP object at 0x00000184DFE674D0&gt;
dut_manager = &lt;src.ssh_manager.SSHManager object at 0x00000184E00392B0&gt;
test_nodes = [&lt;src.ssh_manager.SSHManager object at 0x00000184E001A850&gt;, &lt;src.ssh_manager.SSHManager object at 0x00000184E00C8050&gt;]
network_topology = &lt;src.network_topology.NetworkTopology object at 0x00000184E003A900&gt;
rstp_analyzer = &lt;src.rstp_analyzer.RSTPAnalyzer object at 0x00000184E003AA50&gt;

    def test_port_state_transitions(self, dut_manager, test_nodes,
                                  network_topology, rstp_analyzer):
        """TC.AUTO.1.5: 端口状态转换测试 - 验证Learning状态转换"""
        logger.info("开始端口状态转换测试")
    
        # 创建环形拓扑
&gt;       network_topology.create_ring_topology(use_rstp=True)

tests\test_additional_rstp.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src\network_topology.py:484: in create_ring_topology
    self.configure_bridge_rstp(node, bridge_name, priority, interfaces)
src\network_topology.py:221: in configure_bridge_rstp
    self._configure_rstp_mstpd(node, bridge, priority)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;src.network_topology.NetworkTopology object at 0x00000184E003A900&gt;
node = &lt;src.ssh_manager.SSHManager object at 0x00000184E001A850&gt;, bridge = 'br0', priority = 36864

    def _configure_rstp_mstpd(self, node: SSHManager, bridge: str, priority: int):
        """使用mstpd配置RSTP"""
        commands = [
            f"brctl addbr {bridge}",
            f"mstpctl setforcevers {bridge} rstp",
            f"mstpctl setbridgeprio {bridge} {priority}",
            f"mstpctl setbridgehello {bridge} 2",
            f"mstpctl setbridgefdelay {bridge} 15",
            f"mstpctl setbridgemaxage {bridge} 20",
            f"mstpctl settxholdcount {bridge} 6",
        ]
    
        failed_commands = []
        for cmd in commands:
            stdout, stderr, code = node.execute_sudo(cmd)
            if code != 0 and "exists" not in stderr:
                self.logger.warning(f"MSTPD命令警告: {cmd}\n{stderr}")
                failed_commands.append((cmd, stderr))
    
        # 等待配置生效
        time.sleep(2)
    
        # 验证配置是否成功应用
        self.logger.info(f"验证{bridge}的mstpd配置...")
        stdout, stderr, code = node.execute_sudo(f"mstpctl showbridge {bridge}")
    
        if code == 0:
            # 解析配置验证结果
            config_ok = True
            diagnostics = []
    
            # 检查协议版本
            if "rstp" not in stdout.lower():
                config_ok = False
                diagnostics.append("协议版本未设置为RSTP")
    
            # 检查关键参数
            import re
    
            # 检查Hello Time (应该是2秒)
            hello_match = re.search(r'hello time\s+(\d+)', stdout, re.IGNORECASE)
            if hello_match:
                hello_time = int(hello_match.group(1))
                if hello_time != 2:
                    diagnostics.append(f"Hello Time不正确: 期望2, 实际{hello_time}")
            else:
                diagnostics.append("无法获取Hello Time参数")
    
            # 检查Forward Delay (应该是15秒)
            fd_match = re.search(r'forward delay\s+(\d+)', stdout, re.IGNORECASE)
            if fd_match:
                fd = int(fd_match.group(1))
                if fd != 15:
                    diagnostics.append(f"Forward Delay不正确: 期望15, 实际{fd}")
            else:
                diagnostics.append("无法获取Forward Delay参数")
    
            # 检查Max Age (应该是20秒)
            maxage_match = re.search(r'max age\s+(\d+)', stdout, re.IGNORECASE)
            if maxage_match:
                maxage = int(maxage_match.group(1))
                if maxage != 20:
                    diagnostics.append(f"Max Age不正确: 期望20, 实际{maxage}")
            else:
                diagnostics.append("无法获取Max Age参数")
    
            # 输出诊断信息
            if diagnostics:
                self.logger.warning(f"配置验证发现问题: {'; '.join(diagnostics)}")
                self.logger.info(f"mstpctl showbridge输出:\n{stdout}")
    
                if failed_commands:
                    self.logger.error(f"关键配置失败，失败的命令: {failed_commands}")
                    raise RuntimeError(f"mstpd配置失败: {'; '.join(diagnostics)}")
                else:
                    self.logger.warning("配置可能不完整，但命令执行成功")
            else:
                self.logger.info("mstpd配置验证通过")
        else:
            self.logger.error(f"无法验证mstpd配置: {stderr}")
            if failed_commands:
&gt;               raise RuntimeError(f"mstpd配置失败且无法验证: 失败命令 {failed_commands}")
E               RuntimeError: mstpd配置失败且无法验证: 失败命令 [('mstpctl setforcevers br0 rstp', ''), ('mstpctl setbridgeprio br0 36864', ''), ('mstpctl setbridgehello br0 2', ''), ('mstpctl setbridgefdelay br0 15', ''), ('mstpctl setbridgemaxage br0 20', ''), ('mstpctl settxholdcount br0 6', '')]

src\network_topology.py:347: RuntimeError</failure></testcase><testcase time="0.001" /></testsuite></testsuites>